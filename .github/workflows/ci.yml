# Continuous Integration for FastAPI + asyncpg project
# - Runs on push and pull requests
# - Lints (Ruff), formats (Black), type-checks (mypy), and tests (pytest)
# - Starts a PostgreSQL service for DB-dependent tests

name: CI

on:
  push:
    branches: ["**"]
  pull_request:

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: expenses
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        # Basic health check; the job continues regardless, so we also wait for the port below.
        options: >-
          --health-cmd="pg_isready -U postgres -d expenses" --health-interval=10s --health-timeout=5s --health-retries=5

    env:
      CI: "1"
      # Adjust if your app reads a different env var
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/expenses

    strategy:
      matrix:
        python-version: ["3.10"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip

      - name: Cache pre-commit
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt

      - name: Run pre-commit (lint, imports, format, types)
        run: pre-commit run --all-files

      - name: Wait for PostgreSQL to accept connections
        shell: bash
        run: |
          for i in {1..30}; do
            (echo > /dev/tcp/127.0.0.1/5432) >/dev/null 2>&1 && echo "Postgres is up" && break
            echo "Waiting for Postgres..."
            sleep 2
          done

      - name: Run migrations (if Alembic is configured)
        if: hashFiles('alembic.ini') != ''
        run: alembic upgrade head

      - name: Run tests
        run: |
          pytest -q --maxfail=1 --disable-warnings --cov=expensesex --cov-report=xml || \
          pytest -q --maxfail=1 --disable-warnings
